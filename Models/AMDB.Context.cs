//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Association_Managment.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Association_ManagmentEntities : DbContext
    {
        public Association_ManagmentEntities()
            : base("name=Association_ManagmentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DetailsAssocition> DetailsAssocitions { get; set; }
        public virtual DbSet<JobMember> JobMembers { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<MeetingMember> MeetingMembers { get; set; }
        public virtual DbSet<Meeting> Meetings { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Protocol> Protocols { get; set; }
        public virtual DbSet<TypeMeeting> TypeMeetings { get; set; }
    
        public virtual ObjectResult<JobMembersSearch_Result> JobMembersSearch(Nullable<int> codeMember, Nullable<long> codeJob, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd)
        {
            var codeMemberParameter = codeMember.HasValue ?
                new ObjectParameter("CodeMember", codeMember) :
                new ObjectParameter("CodeMember", typeof(int));
    
            var codeJobParameter = codeJob.HasValue ?
                new ObjectParameter("CodeJob", codeJob) :
                new ObjectParameter("CodeJob", typeof(long));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobMembersSearch_Result>("JobMembersSearch", codeMemberParameter, codeJobParameter, dateStartParameter, dateEndParameter);
        }
    
        public virtual ObjectResult<MeetingsSearch_Result> MeetingsSearch(Nullable<int> codeMember, string subject, Nullable<System.DateTime> meetingDate)
        {
            var codeMemberParameter = codeMember.HasValue ?
                new ObjectParameter("codeMember", codeMember) :
                new ObjectParameter("codeMember", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MeetingsSearch_Result>("MeetingsSearch", codeMemberParameter, subjectParameter, meetingDateParameter);
        }
    
        public virtual ObjectResult<MembersSearch_Result> MembersSearch(string name, string id, Nullable<bool> typeMember, Nullable<bool> allowedSignature, string mailMember, Nullable<System.DateTime> joindate, Nullable<System.DateTime> exitdate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var typeMemberParameter = typeMember.HasValue ?
                new ObjectParameter("typeMember", typeMember) :
                new ObjectParameter("typeMember", typeof(bool));
    
            var allowedSignatureParameter = allowedSignature.HasValue ?
                new ObjectParameter("allowedSignature", allowedSignature) :
                new ObjectParameter("allowedSignature", typeof(bool));
    
            var mailMemberParameter = mailMember != null ?
                new ObjectParameter("mailMember", mailMember) :
                new ObjectParameter("mailMember", typeof(string));
    
            var joindateParameter = joindate.HasValue ?
                new ObjectParameter("joindate", joindate) :
                new ObjectParameter("joindate", typeof(System.DateTime));
    
            var exitdateParameter = exitdate.HasValue ?
                new ObjectParameter("exitdate", exitdate) :
                new ObjectParameter("exitdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MembersSearch_Result>("MembersSearch", nameParameter, idParameter, typeMemberParameter, allowedSignatureParameter, mailMemberParameter, joindateParameter, exitdateParameter);
        }
    
        public virtual ObjectResult<SelectProtocolsByCriteria_Result> SelectProtocolsByCriteria(Nullable<int> monthMeeting, Nullable<System.DateTime> dateMeeting, string subjectMeeting, string meetingDirector)
        {
            var monthMeetingParameter = monthMeeting.HasValue ?
                new ObjectParameter("MonthMeeting", monthMeeting) :
                new ObjectParameter("MonthMeeting", typeof(int));
    
            var dateMeetingParameter = dateMeeting.HasValue ?
                new ObjectParameter("DateMeeting", dateMeeting) :
                new ObjectParameter("DateMeeting", typeof(System.DateTime));
    
            var subjectMeetingParameter = subjectMeeting != null ?
                new ObjectParameter("SubjectMeeting", subjectMeeting) :
                new ObjectParameter("SubjectMeeting", typeof(string));
    
            var meetingDirectorParameter = meetingDirector != null ?
                new ObjectParameter("MeetingDirector", meetingDirector) :
                new ObjectParameter("MeetingDirector", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProtocolsByCriteria_Result>("SelectProtocolsByCriteria", monthMeetingParameter, dateMeetingParameter, subjectMeetingParameter, meetingDirectorParameter);
        }
    }
}
